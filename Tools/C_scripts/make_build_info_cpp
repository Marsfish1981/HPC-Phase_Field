#!/usr/bin/env bash

# create a file buildInfo.cpp with various functions returning build
# information.
#
# To call it from the makefile, you would do something like:
#
# CEXE_sources += buildInfo.cpp
# CEXE_headers += $(BOXLIB_HOME)/Tools/C_scripts/buildInfo.H
# INCLUDE_LOCATIONS +=  $(BOXLIB_HOME)/Tools/C_scripts
# 
# buildInfo.cpp: $(BOXLIB_HOME)/Tools/C_scripts/make_build_info_cpp
#         $(BOXLIB_HOME)/Tools/C_scripts/make_build_info_cpp "$(BOXLIB_HOME)" \
#             "$(COMP)" "$(FCOMP)" \
#             "AUX=$(AUXNAME1)" "AUX=$(AUXNAME2)" \
#             "GIT=$(TOP)" "GIT=$(BOXLIB_HOME)" "GIT=$(ASTRODEV_DIR)" 
#
# where:
#
#  BOXLIB_HOME is a string giving the path to the BoxLib directory
#
#  COMP is the C++ compiler name (as expected by BoxLib)
#
#  FCOMP is the Fortran compiler name (as expected by BoxLib)
#
#  AUXNAME? is something like EOS_PATH, NETWORK_PATH, and CHEMICAL_MODEL.
#  There can be zero or up to three AUX=$().  
#  If necessary, this script can be modified to increase the number of slots for AUX.
#
#  GIT=$() is used for obtaining git hash of the code.
#  There can be zero or up to three GIT=$().  
#  If necessary, this script can be modified to increase the number of slots for GIT.
#


# the basic build strings will be MAX_STRING_LENGTH long
MAX_STRING_LENGTH=128

rm -f build_info.f90

BUILD_DATE=`date | cut -c 1-$MAX_STRING_LENGTH`
BUILD_DIR=`pwd | cut -c 1-$MAX_STRING_LENGTH`
BUILD_MACHINE=`uname -a | cut -c 1-$MAX_STRING_LENGTH`

BOXLIB_DIR=`echo $1 | cut -c 1-$MAX_STRING_LENGTH`
shift

COMP=`echo $1 | cut -c 1-$MAX_STRING_LENGTH`
shift
FCOMP=`echo $1 | cut -c 1-$MAX_STRING_LENGTH`
shift
CCl=`echo $1`
shift
CFLAGS=`echo $1`
shift
CEXEFLAGS=`echo $1`
shift
TMPCMPLR=`echo "$CCl"|sed 's/ -.*//g'`
LOCCC=`which "$TMPCMPLR"`
VERCC=`$TMPCMPLR -v 2>&1|sed ':a;N;$!ba;s/\\\/\\\\\\\/g;s/\n/\\\n     /g;s/\"/\\\"/g'`
BINLEN=`echo "$TMPCMPLR"|wc -c`
TMPCMPLR=`echo "$CCl"|cut -c $BINLEN-$MAX_STRING_LENGTH`
if [ "$TMPCMPLR" = "$CCl" ] ; then
  TMPCMPLR=""
fi
FLGCC="$TMPCMPLR $CFLAGS -c $CEXEFLAGS -DBL_LANG_C"
CXXl=`echo $1`
shift
CXXFLAGS=`echo $1`
shift
CXXEXEFLAGS=`echo $1`
shift
TMPCMPLR=`echo "$CXXl"|sed 's/ -.*//g'`
LOCCXX=`which "$TMPCMPLR"`
VERCXX=`$TMPCMPLR -v 2>&1|sed ':a;N;$!ba;s/\\\/\\\\\\\/g;s/\n/\\\n     /g;s/\"/\\\"/g'`
BINLEN=`echo "$TMPCMPLR"|wc -c`
TMPCMPLR=`echo "$CXXl"|cut -c $BINLEN-$MAX_STRING_LENGTH`
if [ "$TMPCMPLR" = "$CXXl" ] ; then
  TMPCMPLR=""
fi
FLGCXX="$TMPCMPLR $CXXFLAGS -c $CXXEXEFLAGS"
FCl=`echo $1`
shift
FFLAGS=`echo $1`
shift
FEXEFLAGS=`echo $1`
shift
TMPCMPLR=`echo "$FCl"|sed 's/ -.*//g'`
LOCFC=`which "$TMPCMPLR"`
VERFC=`$TMPCMPLR -v 2>&1|sed ':a;N;$!ba;s/\\\/\\\\\\\/g;s/\n/\\\n     /g;s/\"/\\\"/g'`
  BINLEN=`echo "$TMPCMPLR"|wc -c`
  TMPCMPLR=`echo "$FCl"|cut -c $BINLEN-$MAX_STRING_LENGTH`
if [ "$TMPCMPLR" = "$FCl" ] ; then
  TMPCMPLR=""
fi
FLGFC="$TMPCMPLR $FFLAGS -c $FEXEFLAGS"
F90l=`echo $1`
shift
F90FLAGS=`echo $1`
shift
fFLAGS=`echo $1`
shift
fEXEFLAGS=`echo $1`
shift
TMPCMPLR=`echo "$F90l"|sed 's/\ -.*//g'`
if [ "$TMPCMPLR" = "" ] ; then
  LOCF90="not defined"
  VERF90="not defined"
  FLGF90="not defined"
else
  LOCF90=`which "$TMPCMPLR"`
  VERF90=`$TMPCMPLR -v 2>&1|sed ':a;N;$!ba;s/\\\/\\\\\\\/g;s/\n/\\\n     /g;s/\"/\\\"/g'`
  BINLEN=`echo "$TMPCMPLR"|wc -c`
  TMPCMPLR=`echo "$F90l"|cut -c $BINLEN-$MAX_STRING_LENGTH`
  if [ "$TMPCMPLR" = "$F90" ] ; then
    TMPCMPLR=""
  fi
  FLGF90="$TMPCMPLR $F90FLAGS $fFLAGS -c $fEXEFLAGS"
fi
fCl=`echo $1`
shift
TMPCMPLR=`echo "$fCl"|sed 's/\ -.*//g'`
if [ "$TMPCMPLR" = "" ] ; then
  LOCffC="not defined"
  VERffC="not defined"
  FLGffC="not defined"
else
  LOCffC=`which "$TMPCMPLR"`
  VERffC=`$TMPCMPLR -v 2>&1|sed ':a;N;$!ba;s/\\\/\\\\\\\/g;s/\n/\\\n     /g;s/\"/\\\"/g'`
  BINLEN=`echo "$TMPCMPLR"|wc -c`
  TMPCMPLR=`echo "$fCl"|cut -c $BINLEN-$MAX_STRING_LENGTH`
  if [ "$TMPCMPLR" = "$fCl" ] ; then
    TMPCMPLR=""
  fi
  FLGffC="$TMPCMPLR $fFLAGS -c $fEXEFLAGS"
fi
FORT_CPP=`echo $1`
shift
TMPCMPLR=`echo "$FORT_CPP"|sed 's/\ -.*//g'`
if [ "$TMPCMPLR" = "" ] ; then
  LOCFCC="not defined"
  VERFCC="not defined"
  FLGFCC="not defined"
else
  LOCFCC=`which "$TMPCMPLR"`
  VERFCC=`$TMPCMPLR --version 2>&1|sed ':a;N;$!ba;s/\\\/\\\\\\\/g;s/\n/\\\n     /g;s/\"/\\\"/g'`
  BINLEN=`echo "$TMPCMPLR"|wc -c`
  TMPCMPLR=`echo "$FORT_CPP"|cut -c $BINLEN-$MAX_STRING_LENGTH`
  if [ "$TMPCMPLR" = "$FORT_CPP" ] ; then
    TMPCMPLR=""
  fi
  FLGFCC="$TMPCMPLR -DBL_LANG_FORT"
fi
LDFLAGS=`echo $1`
shift
libraries=`echo $1`
shift
CPPFLAGS=`echo $1`
shift
linker_stuff="$CPPFLAGS $CXXFLAGS $LDFLAGS"
linker_stuff=`echo "$linker_stuff"|sed 's/.\{100\} /&\\\n     /g'`
linker_stuff="     $linker_stuff"
naux=0
ngit=0
ndif=0
while [ $# -gt 0 ] ; do
  INFOTYPE=`echo $1 | cut -c 1-3`
  INFOPATH=`echo $1 | cut -c 5-$MAX_STRING_LENGTH`
  if [ "$INFOTYPE" = "AUX" ] ; then
      naux=$((naux+1))
      AUX[$naux]="$INFOPATH"
  elif [ "$INFOTYPE" = "GIT" ] ; then
      ngit=$((ngit+1))
      if [ -d "$INFOPATH" ] ; then
	  GIT[$ngit]=`cd "$INFOPATH"; git rev-parse HEAD | cut -c 1-$MAX_STRING_LENGTH`
          GITBCH[$ngit]=`cd "$INFOPATH";git branch -v| \
                                grep \\\*|sed 's/\* //g;s/\\\/\\\\\\\/g;s/\"/\\\"/g'`
      fi
  elif [ "$INFOTYPE" = "DIF" ] ; then
      ndif=$((ndif+1))
      if [ -d "$INFOPATH" ] ; then
          DIF[$ndif]=`cd "$INFOPATH";git diff -w| \
                          sed ':a;N;$!ba;s/\\\/\\\\\\\/g;s/\n/\\\n/g;s/\"/\\\"/g'`
      fi
  fi
  shift
done


cat > buildInfo.cpp << EOF

const char* buildInfoGetBuildDate() {

  static const char BUILD_DATE[] = "$BUILD_DATE";
  return BUILD_DATE;
}

const char* buildInfoGetBuildDir() {

  static const char BUILD_DIR[] = "$BUILD_DIR";
  return BUILD_DIR;
}

const char* buildInfoGetBuildMachine() {

  static const char BUILD_MACHINE[] = "$BUILD_MACHINE";
  return BUILD_MACHINE;
}

const char* buildInfoGetBoxlibDir() {

  static const char BOXLIB_DIR[] = "$BOXLIB_DIR";
  return BOXLIB_DIR;
}

const char* buildInfoGetComp() {

  static const char COMP[] = "$COMP";
  return COMP;
}

const char* buildInfoGetCompilerLoc(int i) {

  static const char LOCCC[]  = "$LOCCC";
  static const char LOCCXX[] = "$LOCCXX";
  static const char LOCFC[]  = "$LOCFC";
  static const char LOCF90[] = "$LOCF90";
  static const char LOCffC[] = "$LOCffC";
  static const char LOCFCC[] = "$LOCFCC";
  static const char EMPT[]   = "";

  switch(i)
  {
    case 1: return LOCCC;
    case 2: return LOCCXX;
    case 3: return LOCFC;
    case 4: return LOCF90;
    case 5: return LOCffC;
    case 6: return LOCFCC;
    default: return EMPT;
  }
}

const char* buildInfoGetCompilerVer(int i) {

  static const char VERCC[]   = "     $VERCC";
  static const char VERCXX[]  = "     $VERCXX";
  static const char VERFC[]   = "     $VERFC";
  static const char VERF90[]  = "     $VERF90";
  static const char VERffC[]  = "     $VERffC";
  static const char VERFCC[]  = "     $VERFCC";
  static const char EMPT[]   = "";

  switch(i)
  {
    case 1: return VERCC;
    case 2: return VERCXX;
    case 3: return VERFC;
    case 4: return VERF90;
    case 5: return VERffC;
    case 6: return VERFCC;
    default: return EMPT;
  }
}

const char* buildInfoGetCompilerFlags(int i) {

  static const char FLGCC[]   = "$FLGCC";
  static const char FLGCXX[]  = "$FLGCXX";
  static const char FLGFC[]   = "$FLGFC";
  static const char FLGF90[]  = "$FLGF90";
  static const char FLGffC[]  = "$FLGffC";
  static const char FLGFCC[]  = "$FLGFCC";
  static const char EMPT[]   = "";

  switch(i)
  {
    case 1: return FLGCC;
    case 2: return FLGCXX;
    case 3: return FLGFC;
    case 4: return FLGF90;
    case 5: return FLGffC;
    case 6: return FLGFCC;
    default: return EMPT;
  }
}

const char* buildInfoGetFcomp() {

  static const char FCOMP[] = "$FCOMP";
  return FCOMP;
}


const char* buildInfoGetAux(int i) {

  static const char AUX1[] = "${AUX[1]}";
  static const char AUX2[] = "${AUX[2]}";
  static const char AUX3[] = "${AUX[3]}";
  static const char EMPT[] = "";

  switch(i)
  {
    case 1: return AUX1;
    case 2: return AUX2;
    case 3: return AUX3;
    default: return EMPT;
  }
}

const char* buildInfoGetDif(int i) {

  static const char* DIF1 = "${DIF[1]}";
  static const char* DIF2 = "${DIF[2]}";
  static const char* DIF3 = "${DIF[3]}";
  static const char* EMPT = "";

  switch(i)
  {
    case 1: return DIF1;
    case 2: return DIF2;
    case 3: return DIF3;
    default: return EMPT;
  }
}


const char* buildInfoGetGitHash(int i) {

  static const char HASH1[] = "${GIT[1]}";
  static const char HASH2[] = "${GIT[2]}";
  static const char HASH3[] = "${GIT[3]}";
  static const char EMPT[] = "";

  switch(i)
  {
    case 1: return HASH1;
    case 2: return HASH2;
    case 3: return HASH3;
    default: return EMPT;
  }
}

const char* buildInfoGetGitBranch(int i) {

  static const char BRANCH1[] = "${GITBCH[1]}";
  static const char BRANCH2[] = "${GITBCH[2]}";
  static const char BRANCH3[] = "${GITBCH[3]}";
  static const char EMPT[] = "";

  switch(i)
  {
    case 1: return BRANCH1;
    case 2: return BRANCH2;
    case 3: return BRANCH3;
    default: return EMPT;
  }
}

const char* buildInfoGetLinkerInfo(int i) {

  static const char LINKER[] = "$LOCCXX";
  static const char LFLAGS[] = "$linker_stuff";
  static const char LLIBS[] = "$libraries";
  static const char EMPT[] = "";

  switch(i)
  {
    case 1: return LINKER;
    case 2: return LFLAGS;
    case 3: return LLIBS;
    default: return EMPT;
  }
}

EOF
