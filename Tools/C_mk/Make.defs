#
# Establish some defaults, assuming that they are not already set by the
# Makefile that includes this file.
#

UNAMEM := $(shell uname -m)
UNAMEN := $(shell uname -n)
UNAMES := $(shell uname -s)

ifeq ($(findstring CYGWIN_NT, $(UNAMES)), CYGWIN_NT)
    MACHINE := CYGWIN_NT
endif

ifeq ($(findstring CYGWIN_NT, $(UNAMES)), CYGWIN_NT)
    HOSTNAMEF := $(shell hostname)
else
    HOSTNAMEF := $(shell hostname -f)
endif

#jfe
ifeq ($(findstring gwd, $(UNAMEN)), gwd)
   GWDG = TRUE
endif

ifndef MACHINE
    MACHINE := $(shell uname)
endif
#
# We'd also like to distinguish between SunOS and Solaris.
#
UNAMER := $(shell uname -r)
ifeq ($(MACHINE), SunOS)
    ifeq ($(shell awk 'BEGIN {print "$(UNAMER)"; print "5.0"}' /dev/null | \
            sort | head -1), 5.0)
        MACHINE := Solaris
    endif
endif

#
# Set special flag to identify machine
#
ifeq ($(MACHINE), Darwin)
  ifeq ($(findstring MarcsLaptop, $(UNAMEN)), MarcsLaptop)
    WHICHDARWIN:=MARC
  endif
  ifeq ($(findstring ruhr, $(UNAMEN)), ruhr)
    WHICHDARWIN:=MATTI
  endif
endif

ifeq ($(MACHINE), Linux)
  WHICHLINUX := GENERICLINUX
  ifeq ($(findstring n2001, $(UNAMEN)), n2001)
    WHICHLINUX := PCCLUSTER
  endif
  ifeq ($(findstring xfe1, $(UNAMEN)), xfe1)
    WHICHLINUX := ALPHACLUSTER
  endif
  ifeq ($(findstring lens, $(UNAMEN)), lens)
    WHICHLINUX := LENS
  endif
  ifeq ($(findstring jvn, $(UNAMEN)), jvn)
    WHICHLINUX := JVN
  endif
  ifeq ($(findstring jac, $(UNAMEN)), jac)
    WHICHLINUX := JACQUARD
  endif
  ifeq ($(findstring cfe, $(UNAMEN)), cfe)
    WHICHLINUX := COLUMBIA
  endif
  ifeq ($(findstring columbia, $(UNAMEN)), columbia)
    WHICHLINUX := COLUMBIA
  endif
  ifeq ($(findstring orange, $(UNAMEN)), orange)
    WHICHLINUX := ORANGE
  endif
  ifeq ($(findstring cy-c, $(UNAMEN)), cy-c)
    WHICHLINUX := COYOTE
  endif
  ifeq ($(findstring davinci, $(UNAMEN)), davinci)
    WHICHLINUX := DAVINCI
  endif
  ifeq ($(findstring hyperion, $(UNAMEN)), hyperion)
    WHICHLINUX := HYPERION
  endif
  ifeq ($(findstring della, $(UNAMEN)), della)
    WHICHLINUX := DELLA
  endif
  ifeq ($(findstring ranger, $(UNAMEN)), ranger)
    WHICHLINUX := RANGER
  endif
  ifeq ($(findstring darter, $(UNAMEN)), darter)
    WHICHLINUX := DARTER
  endif
  ifeq ($(findstring orion, $(UNAMEN)), orion)
    WHICHLINUX := ORION
  endif
  ifeq ($(findstring grace, $(UNAMEN)), grace)
    WHICHLINUX := GRACE
  endif
  ifeq ($(findstring cvrsvc, $(UNAMEN)), cvrsvc)
    WHICHLINUX := CARVER
  endif
  ifeq ($(findstring euclid, $(UNAMEN)), euclid)
    WHICHLINUX := EUCLID
  endif
  ifeq ($(findstring freedom, $(UNAMEN)), freedom)
    WHICHLINUX := FREEDOM
  endif
  ifeq ($(findstring hera, $(UNAMEN)), hera)
    WHICHLINUX := HERA
  endif
  ifeq ($(findstring cab, $(UNAMEN)), cab)
    WHICHLINUX := CAB
  endif
  ifeq ($(findstring syrah, $(UNAMEN)), syrah)
    WHICHLINUX := SYRAH
  endif
  ifeq ($(findstring garnet, $(UNAMEN)), garnet)
    WHICHLINUX := GARNET
  endif
  ifeq ($(findstring edison, $(UNAMEN)), edison)
    WHICHLINUX := EDISON
  endif
  ifeq ($(findstring edison, $(NERSC_HOST)), edison)
    WHICHLINUX := EDISON
  endif
  ifeq ($(findstring cori, $(NERSC_HOST)), cori)
    WHICHLINUX := CORI
  endif
  ifeq ($(findstring cims.nyu.edu, $(HOSTNAMEF)), cims.nyu.edu)
    WHICHLINUX := DONEV
  endif
  ifeq ($(findstring CIMS.NYU.EDU, $(HOSTNAMEF)), CIMS.NYU.EDU)
    WHICHLINUX := DONEV
  endif
  ifeq ($(findstring h2o, $(UNAMEN)), h2o)
    WHICHLINUX := BLUE_WATERS
  endif
  ifeq ($(findstring titan, $(UNAMEN)), titan)
    WHICHLINUX := TITAN
  endif
  ifeq ($(findstring chester, $(UNAMEN)), chester)
    WHICHLINUX := CHESTER
  endif
  ifeq ($(findstring hera, $(UNAMEN)), hera)
    WHICHLINUX := HERA
  endif
  ifeq ($(findstring lanl, $(UNAMEN)), lanl)
    WHICHLINUX := LANL
    # classified machines are a mix of Linux clusters and Cray
    # so this might need to be updated in the future
  endif
  ifeq ($(findstring bint, $(UNAMEN)), bint)
    WHICHLINUX := BABBAGE
  endif
  ifeq ($(findstring mira, $(UNAMEN)), mira)
    WHICHLINUX := MIRA
  endif
endif
#
# Some Lawrencium crap ...
#
ifeq ($(findstring .scs, $(UNAMEN)), .scs)
  XTRALIBS += -lgcc -lstdc++
endif

ifeq ($(MACHINE), HP-UX)
    #
    # `-' is not a valid character in a preprocessing token.
    # That is to say, -DBL_HP-UX is not, strictly speaking, valid.
    #
    MACHINE := HPUX
endif

# Australian machines
ifeq ($(findstring ad.unsw.edu.au, $(UNAMEN)), ad.unsw.edu.au)
  ifeq ($(findstring Fyr, $(UNAMEN)), Fyr)
    WHICHLINUX := FYR
  endif
endif

ifndef PRECISION
  PRECISION = DOUBLE
endif

ifndef DEBUG
  DEBUG	= TRUE
endif

ifndef PROFILE
  PROFILE = FALSE
endif

ifndef TRACE_PROFILE
  TRACE_PROFILE = FALSE
endif

ifndef COMM_PROFILE
  COMM_PROFILE = FALSE
endif

ifndef MEM_PROFILE
  MEM_PROFILE = FALSE
endif
ifeq ($(MEM_PROFILE),TRUE)
  USE_CXX11 = TRUE
endif

ifndef TINY_PROFILE
  TINY_PROFILE = FALSE
endif
ifdef PROFILE
  TINY_PROFILE = FALSE
endif

ifndef TEST
  TEST = FALSE
endif

ifndef BACKTRACE
  BACKTRACE = FALSE
endif

ifndef LAZY
  LAZY = FALSE
endif
ifeq ($(LAZY),TRUE)
  USE_CXX11 = TRUE
endif

ifndef DIM
  DIM = 2
endif

ifndef COMP
  COMP = CC
endif

ifndef FCOMP
  FCOMP = f77
endif

ifndef USE_MPI
  USE_MPI = FALSE
endif

ifndef USE_CXX11
  USE_CXX11 = FALSE
endif

ifeq ($(USE_UPCXX),TRUE)
  USE_MPI = TRUE
  USE_CXX11 = TRUE
endif

ifeq ($(USE_MPI3),TRUE)
  USE_MPI = TRUE
  USE_CXX11 = TRUE
endif

ifndef DIMENSION_AGNOSTIC
  DIMENSION_AGNOSTIC = FALSE
endif

ifndef USE_ASSERTION
  USE_ASSERTION = FALSE
endif

#
# Defaults for BoxLib style programs.
#
ARCH		= IEEE
FORTLINK  	= UNDERSCORE

FORTPREP  	= perl $(BOXLIB_HOME)/Tools/C_scripts/strip72 -c
# a placeholder in case we have to write something later
F90PREP  	= cat
MKDEP		= perl $(BOXLIB_HOME)/Tools/C_scripts/mkdep
MODDEP		= perl $(BOXLIB_HOME)/Tools/F_scripts/moddep.pl

RANLIB = true

EXE_OUTPUT_OPTION      = -o $(objEXETempDir)/$*.o
LIB_OUTPUT_OPTION      = -o $(objTempDir)/$*.o
FORT_EXE_OUTPUT_OPTION = -o $(objEXETempDir)/$*.o
FORT_LIB_OUTPUT_OPTION = -o $(objTempDir)/$*.o
#
# Generic setup for using gcc/g++ ...
#
USE_GCC =
ifeq ($(findstring gcc, $(COMP)), gcc)
    USE_GCC = true
endif
ifeq ($(findstring gnu, $(COMP)), gnu)
    USE_GCC = true
endif
ifeq ($(findstring g++, $(COMP)), g++)
    USE_GCC = true
endif

ifdef USE_GCC
    CXXPRFF    := -p
    CXXOPTF    += -g -O3
    ifeq ($(THREAD_SANITIZER),TRUE)
        CXXOPTF += -fsanitize=thread
        CXXDEBF += -fsanitize=thread
    endif
    ifeq ($(FSANITIZER),TRUE)
        CXXOPTF += -fsanitize=address -fsanitize=undefined
	CXXDEBF += -fsanitize=address -fsanitize=undefined
    endif
    #CXXDEBF    += -g -O1 -Wall -Wno-sign-compare
    CXXDEBF    += -g -O0 -fno-inline -ggdb -Wall -Wno-sign-compare
    FULLWARN   := -pedantic -Wall -Wno-sign-compare
    CXX	       := g++
    CC	       := gcc
    __gcc_version := $(shell $(CXX) -dumpversion | head -1 | sed -e 's;.*  *;;')
    __gcc_major_version := $(shell $(CXX) -dumpversion | head -1 | sed -e 's;.*  *;;' | sed -e 's;\..*;;')
    __gcc_minor_version := $(shell $(CXX) -dumpversion | head -1 | sed -e 's;.*  *;;' | sed -e 's;[^.]*\.;;' | sed -e 's;\..*;;')

    COMP_VERSION := $(shell $(CXX) -v 2>&1 | grep version)

    # ifeq ($(findstring 5, $(__gcc_major_version)), 5)
    # 	 CXXOPTF += -fno-inline
    # endif
    
    CXXFLAGS = -Wno-deprecated
    ifeq ($(USE_IN_SITU), TRUE)
        # Necessary to compile in situ analysis
        CXXFLAGS += -ftemplate-depth-256
    else
        CXXFLAGS += -ftemplate-depth-128
    endif
    DEFINES += -DBL_GCC_VERSION='$(__gcc_version)'
    DEFINES += -DBL_GCC_MAJOR_VERSION=$(__gcc_major_version)
    DEFINES += -DBL_GCC_MINOR_VERSION=$(__gcc_minor_version)
    ifeq ($(USE_OMP),TRUE)
      CXXOPTF += -fopenmp
      CXXDEBF += -fopenmp
    endif
    #
    # Force C to have same flags as C++.
    #
    COPTF := $(CXXOPTF) -std=gnu99
    CDEBF := $(CXXDEBF) -std=gnu99

    ifeq ($(USE_CXX11),TRUE)
        CXXOPTF += -std=c++11
        CXXDEBF += -std=c++11
    endif

else

    #
    # Set some reasonable defaults.
    #
    CXX = CC
    FC  = f77
    CC  = cc

endif

ifeq ($(findstring rose, $(COMP)), rose)
    CXXPRFF    := -p
    CXXOPTF    += -g -O3
    CXXDEBF    += -g -O1 -Wall -Wno-sign-compare
    FULLWARN   := -pedantic -Wall -Wno-sign-compare
    CXX	       := $(ROSECOMP)
    CC	       := $(ROSECOMP)
    __gcc_version := $(shell gcc -dumpversion | head -1 | sed -e 's;.*  *;;')
    __gcc_major_version := $(shell gcc -dumpversion | head -1 | sed -e 's;.*  *;;' | sed -e 's;\..*;;')
    __gcc_minor_version := $(shell gcc -dumpversion | head -1 | sed -e 's;.*  *;;' | sed -e 's;[^.]*\.;;' | sed -e 's;\..*;;')
    CXXFLAGS =  $(ROSECXXFLAGS) -ftemplate-depth-64 -Wno-deprecated
    DEFINES += -DBL_GCC_VERSION='$(__gcc_version)'
    DEFINES += -DBL_GCC_MAJOR_VERSION=$(__gcc_major_version)
    DEFINES += -DBL_GCC_MINOR_VERSION=$(__gcc_minor_version)
    ifeq ($(__gcc_major_version),2)
       GNU_STD_INCL = $(BOXLIB_HOME)/BoxLib/std
    endif
    ifeq ($(USE_OMP),TRUE)
      CXXOPTF += -fopenmp
      CXXDEBF += -fopenmp
      COPTF += -fopenmp
      CDEBF += -fopenmp
    endif
    #
    # Force C to have same flags as C++.
    #
    COPTF += $(CXXOPTF)
    CDEBF += $(CXXDEBF)
endif

ifeq ($(findstring rose, $(FCOMP)), rose)
    FC := $(ROSEFCOMP)
    fC := $(ROSEFCOMP)
    FFLAGS = -fno-range-check -fno-second-underscore -J$(fmoddir) -I$(fmoddir)
    fFLAGS = -fno-range-check -fno-second-underscore -J$(fmoddir) -I$(fmoddir)
    FOPTF += -g -O
    fOPTF += -g -O
    FDEBF += -g -O0
    fDEBF += -g -O0
    _f95_lib:=$(shell gfortran -print-file-name=libgfortran.a)
    ifeq ($(_f95_lib),libgfortran.a)
      _f95_lib:=$(shell gfortran -print-file-name=libgfortran.so)
    endif
    override XTRALIBS += $(_f95_lib)
    FOPTF += -ffixed-line-length-0 -g -O3
    fOPTF += -ffixed-line-length-0 -g -O3
    FDEBF += -g -O1 -ffixed-line-length-0 -fbounds-check -fbacktrace -Wuninitialized -Wunused -ffpe-trap=invalid -finit-real=nan
    fDEBF += -g -O1 -ffixed-line-length-0 -fbounds-check -fbacktrace -Wuninitialized -Wunused -ffpe-trap=invalid -finit-real=nan
endif

ifeq ($(FCOMP),g77)
    FC := $(FCOMP)
    fC := $(FC)
    FFLAGS = -fno-second-underscore
    fFLAGS = -fno-second-underscore
    FOPTF += -g -O
    fOPTF += -g -O
    FDEBF += -g -O0
    fDEBF += -g -O0
    _f77_lib:=$(shell g77 -print-file-name=libg2c.a)
    override XTRALIBS += $(_f77_lib)
    FDEBF +=   -ffortran-bounds-check 
    FDEBF += -Wimplicit
    fDEBF += -Wimplicit
    fDEBF +=   -ffortran-bounds-check
endif

ifeq ($(findstring gfortran, $(FCOMP)), gfortran)
    FC = $(FCOMP)
    fC = $(FCOMP)
    FFLAGS = -fno-range-check -fno-second-underscore -J$(fmoddir) -I $(fmoddir)
    fFLAGS = -fno-range-check -fno-second-underscore -J$(fmoddir) -I $(fmoddir)

    # ask gfortran the name of the library to link in.  First check for the
    # static version.  If it returns only the name w/o a path, then it
    # was not found.  In that case, ask for the shared-object version.
    _f95_lib:=$(shell $(FCOMP) -print-file-name=libgfortran.a)
    ifeq ($(_f95_lib),libgfortran.a)
      _f95_lib:=$(shell $(FCOMP) -print-file-name=libgfortran.so)
    endif

    FCOMP_VERSION := $(shell $(FC) -v 2>&1 | grep version)
  

    ifeq ($(HOST),baragon)
       LIBRARY_LOCATIONS += $(shell $(FCOMP) -print-file-name=libgfortran.so)
       override XTRALIBS += -lgfortran -lquadmath
    else
    ifeq ($(findstring cims.nyu.edu, $(HOSTNAME)), cims.nyu.edu)
       XTRALIBS += -lgfortran
    else
       override XTRALIBS += $(_f95_lib)       
    endif
    endif

    FOPTF += -ffixed-line-length-0 -g -O3
    fOPTF += -ffixed-line-length-0 -g -O3
    ifeq ($(THREAD_SANITIZER),TRUE)
        FOPTF += -fsanitize=thread
        fOPTF += -fsanitize=thread
    endif
    ifeq ($(FSANITIZER),TRUE)
        FOPTF += -fsanitize=address -fsanitize=undefined
        fOPTF += -fsanitize=address -fsanitize=undefined
        FDEBF += -fsanitize=address -fsanitize=undefined
        fDEBF += -fsanitize=address -fsanitize=undefined
    endif
    FDEBF += -g -O0 -ffixed-line-length-0 -fbounds-check -fbacktrace -Wuninitialized -Wno-maybe-uninitialized -Wunused -ffpe-trap=invalid,zero -finit-real=snan
    fDEBF += -g -O0 -ffixed-line-length-0 -fbounds-check -fbacktrace -Wuninitialized -Wno-maybe-uninitialized -Wunused -ffpe-trap=invalid,zero -finit-real=snan

   ifeq ($(USE_OMP),TRUE)
    FOPTF += -fopenmp
    fOPTF += -fopenmp
    FDEBF += -fopenmp
    fDEBF += -fopenmp
   endif
endif

ifeq ($(FCOMP),g95)
    FC = g95
    fC = g95
    FFLAGS = -fno-second-underscore -fmod=$(fmoddir) -I $(fmoddir) 
    fFLAGS = -fno-second-underscore -fmod=$(fmoddir) -I $(fmoddir) 
    _f95_lib:=$(shell g95 -print-file-name=libf95.a)
    override XTRALIBS += $(_f95_lib)
    FOPTF += -O2 -g -ffixed-line-length-0 -Wall #-Wextra
    fOPTF += -O2 -g -ffixed-line-length-0 -Wall #-Wextra
    FDEBF += -g -O0 -fbounds-check
    fDEBF += -g -O0 -fbounds-check

   ifeq ($(USE_OMP),TRUE)
    FOPTF += -fopenmp
    fOPTF += -fopenmp
    FDEBF += -fopenmp
    fDEBF += -fopenmp

     CXXOPTF += -openmp
     CXXDEBF += -openmp
     ifeq ($(ICC_MAJOR_VERSION),11)
        CXXOPTF += -openmp-report2
        CXXDEBF += -openmp-report2
     endif
   endif
endif

ifeq ($(COMP),Intel)
   ifeq ($(UNAMEM),ia64)
     ifeq ($(WHICHLINUX),DAVINCI)
        _icpc := icc
        _icc  := icc
     else
        _icpc := ecc
        _icc  := ecc
     endif
   else
     _icpc := icc
     _icc  := icc
   endif

   ifeq ($(WHICHLINUX), CORI)
     CXXOPTF += -g -O2 -ip -qopt-report=5 -qopt-report-phase=vec -parallel-source-info=2 -fp-model source
   endif

   ifeq ($(WHICHLINUX), EDISON)
     CXXOPTF += -g -O2 -ip -qopt-report=5 -qopt-report-phase=vec -parallel-source-info=2 -fp-model source
   endif

   ifeq ($(WHICHLINUX), BABBAGE)
     ifneq ($(MIC), TRUE) # the "-xHost" flag conflicts with the "-mmic" option
       CXXOPTF += -g -O2 -ip -xHost -qopt-report=5 -qopt-report-phase=vec -fp-model source
     else
       CXXOPTF += -g -O2 -ip -qopt-report=5 -qopt-report-phase=vec -fp-model source
     endif
   endif

   CXXDEBF += -g -O0 -Wcheck

   COPTF += $(CXXOPTF) -std=c99
   CDEBF += $(CXXDEBF) -std=c99

   ifeq ($(USE_CXX11),TRUE)
       CXXOPTF += -std=c++11
       CXXDEBF += -std=c++11       
   endif

   __icc_version := $(shell $(_icpc) -V 2>&1 1>/dev/null | grep Version)

   COMP_VERSION := $(shell $(_icpc) -V 2>&1 | grep 'Version')                    

   ifeq ($(USE_OMP),TRUE)
     CXXOPTF += -openmp
     CXXDEBF += -openmp
     COPTF += -openmp
     CDEBF += -openmp
   endif

   CXX = $(_icpc) -Wno-deprecated
   CC  = $(_icc)

   # these were never defined for Intel > 12
   DEFINES += -DBL_ICC_VERSION=$(ICC_VERSION)
   DEFINES += -DBL_ICC_MAJOR_VERSION=$(ICC_MAJOR_VERSION)
   DEFINES += -DBL_ICC_MINOR_VERSION=$(ICC_MINOR_VERSION)

#jfe
   ifeq ($(GWDG), TRUE)
     ifeq ($(USE_MPI),TRUE)
       CXX = mpiicpc -Wno-deprecated
       CC  = mpiicc
     endif
   endif
#end jfe

endif

ifeq ($(FCOMP),Intel)
   ifeq ($(UNAMEM),ia64)
     _ifc := efc
   else
     _ifc := ifc
   endif

   __ifc_version := $(shell $(_ifc) -V 2>&1 | grep Version)
   _ifc = ifort
   override XTRALIBS += -lifcore
#    override XTRALIBS += -lguide
#    CAR: Might be needed ^^^^^^^ in some instances.

   FCOMP_VERSION := $(shell $(_ifc) -V 2>&1 | grep 'Version')                    

   ifeq ($(USE_OMP),TRUE)
     FOPTF += -openmp
     fOPTF += -openmp
     FDEBF += -openmp
     fDEBF += -openmp
   endif

   FDEBF += -g # -u -check all -warn all
   fDEBF += -g # -u -check all -warn all 


   FOPTF += -g
   fOPTF += -g

   ifeq ($(WHICHLINUX), CORI)
     FOPTF += -O2 -ip -g -qopt-report=5 -qopt-report-phase=vec -parallel-source-info=2 #-qoverride-limits
     fOPTF += -O2 -ip -g -qopt-report=5 -qopt-report-phase=vec -parallel-source-info=2 #-qoverride-limits
   endif
   ifeq ($(WHICHLINUX), EDISON)
     FOPTF += -O2 -ip -g -qopt-report=5 -qopt-report-phase=vec -parallel-source-info=2 #-qoverride-limits
     fOPTF += -O2 -ip -g -qopt-report=5 -qopt-report-phase=vec -parallel-source-info=2 #-qoverride-limits
   endif
   ifeq ($(WHICHLINUX), BABBAGE)
     ifneq ($(MIC), TRUE) # the "-xHost" flag conflicts with the "-mmic" option
       FOPTF += -O2 -ip -xHost -qopt-report=5 -qopt-report-phase=vec #-qoverride-limits
       fOPTF += -O2 -ip -xHost -qopt-report=5 -qopt-report-phase=vec #-qoverride-limits
     else
       FOPTF += -O2 -ip -qopt-report=5 -qopt-report-phase=vec #-qoverride-limits
       fOPTF += -O2 -ip -qopt-report=5 -qopt-report-phase=vec #-qoverride-limits
     endif
   endif

   FDEBF += -CB #-warn all -warn nounused
   fDEBF += -CB #-warn all -warn nounused 

   ifneq ($(UNAMEN),maudib.ucolick.org)
      LIBRARY_LOCATIONS += $(shell echo `which ifort | sed 's;bin/ifort;;'`lib)
   endif

#   _ifc += -module $(fmoddir)
    FOPTF += -module $(fmoddir)
    fOPTF += -module $(fmoddir)
    FDEBF += -module $(fmoddir)
    fDEBF += -module $(fmoddir)

    FC = $(_ifc)
    fC = $(_ifc)
   NEEDS_FLUSH_F := TRUE

#jfe
   ifeq ($(GWDG), TRUE)
     ifeq ($(USE_MPI),TRUE)
       FC = mpiifort --fc=$(_ifc)
       fC = mpiifort --fc=$(_ifc)
     endif
   endif
#end jfe

endif

FCOMPSuffix := .$(FCOMP)

ifndef F90
F90 = $(FC)
endif

include $(BOXLIB_HOME)/Tools/C_mk/Make.$(MACHINE)

ifeq ($(DEBUG),TRUE)
    FFLAGS	+= $(FDEBF)
    fFLAGS	+= $(fDEBF)
    CXXFLAGS	+= $(CXXDEBF)
    CFLAGS	+= $(CDEBF)
    CPPFLAGS	+= -DDEBUG
    DebugSuffix := .DEBUG
else
    FFLAGS	+= $(FOPTF)
    fFLAGS	+= $(fOPTF)
    CXXFLAGS	+= $(CXXOPTF)
    CFLAGS	+= $(COPTF)
    CPPFLAGS	+= -DNDEBUG
    DebugSuffix :=
endif

ifeq ($(GPROF),TRUE)
   FFLAGS   += -pg
   CXXFLAGS += -pg
   fFLAGS   += -pg
   CFLAGS   += -pg
endif

ifeq ($(TRACE_PROFILE),TRUE)
  PROFILE = TRUE
endif

ifeq ($(COMM_PROFILE),TRUE)
  PROFILE = TRUE
endif

ifeq ($(PROFILE),TRUE)
    CPPFLAGS    += -DBL_PROFILING
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),TRUETRUE)
        CPPFLAGS    += -DBL_TRACE_PROFILING
        CPPFLAGS    += -DBL_COMM_PROFILING
        ProfSuffix	:= .COMTR_PROF
    endif
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),TRUEFALSE)
        CPPFLAGS    += -DBL_TRACE_PROFILING
        ProfSuffix	:= .TRACE_PROF
    endif
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),FALSETRUE)
        CPPFLAGS    += -DBL_COMM_PROFILING
        ProfSuffix	:= .COMM_PROF
    endif
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),FALSEFALSE)
        ProfSuffix	:= .PROF
    endif
else
    ifeq ($(TINY_PROFILE),TRUE)
        CPPFLAGS    += -DBL_TINY_PROFILING
        ProfSuffix	:= .TPROF
    else
        ProfSuffix	:=
    endif
endif

ifeq ($(MEM_PROFILE),TRUE)
  CPPFLAGS += -DBL_MEM_PROFILING
  MProfSuffix := .MPROF
else
  MProfSuffix :=
endif

ifeq ($(COMP),Intel)
  ifeq ($(FCOMP),Intel)
    ifeq ($(ITAC_TRACE), TRUE)
      ITACSuffix := .ITAC
    endif
  endif
endif

ifeq ($(TEST),TRUE)
    CPPFLAGS += -DBL_TESTING
    ifneq ($(DEBUG),TRUE)
        DebugSuffix := .TEST
    endif
endif

ifeq ($(BACKTRACE),TRUE)
    CPPFLAGS += -DBL_BACKTRACING -DBL_TESTING
    BTSuffix := .BT
else
    BTSuffix :=
endif

ifeq ($(LAZY),TRUE)
    CPPFLAGS += -DBL_LAZY
endif

ifeq ($(USE_ARRAYVIEW), TRUE)
  DEFINES += -DBL_USE_ARRAYVIEW
  ARRAYVIEWDIR ?= $(HOME)/Development/ArrayView
  INCLUDE_LOCATIONS += $(ARRAYVIEWDIR)
  LIBRARY_LOCATIONS += $(ARRAYVIEWDIR)
  LIBRARIES += -larrayview$(DIM)d.$(machineSuffix)
  VPATH_LOCATIONS   += $(ARRAYVIEWDIR)
endif

ifeq ($(USE_MPI),TRUE)
    MPISuffix	:= .MPI
    CPPFLAGS	+= -DBL_USE_MPI
else
    MPISuffix	:=
endif

ifeq ($(USE_MPI3),TRUE)
    MPISuffix := .MPI3
    CPPFLAGS  += -DBL_USE_MPI3
endif

ifeq ($(USE_MPI),TRUE)
    include $(BOXLIB_HOME)/Tools/C_mk/Make.mpi
endif

ifeq ($(USE_UPCXX),TRUE)
    UPCXXSuffix := .UPCXX
    CPPFLAGS    += -DBL_USE_UPCXX
    include $(BOXLIB_HOME)/Tools/C_mk/Make.upcxx
else
    UPCXXSuffix :=
endif

ifeq ($(USE_UPCXX),TRUE)
    CPPFLAGS  += -DBL_USE_TEAM 
else
  ifeq ($(USE_MPI3),TRUE)
    CPPFLAGS  += -DBL_USE_TEAM 
  endif
endif

ifeq ($(USE_IPM),TRUE)
    IPMSuffix	:= .IPM
else
    IPMSuffix	:=
endif

ifeq ($(USE_DUMPI),TRUE)
    DUMPISuffix	:= .DUMPI
else
    DUMPISuffix	:=
endif

ifeq ($(USE_OMP),TRUE)
    OMPSuffix	:= .OMP
    CPPFLAGS	+= -DBL_USE_OMP
    #include $(BOXLIB_HOME)/Tools/C_mk/Make.mpi
else
    OMPSuffix	:=
endif

ifeq ($(USE_CXX11),TRUE)
   CPPFLAGS     += -DBL_USE_CXX11
endif

ifeq ($(USE_OLDPLOTPER),TRUE)
    CPPFLAGS    += -DBL_USE_OLDPLOTPER
endif

ifeq ($(USE_LEVELSET),TRUE)
    LevelSetSuffix := .LevelSet
else
    LevelSetSuffix := 
endif

ifeq ($(USE_MAESTRO_INIT),TRUE)
    MAESTROSuffix := .MAESTRO
else
    MAESTROSuffix :=
endif

ifeq ($(USE_LMC_SDC),TRUE)
    SDCSuffix := .SDC
    DEFINES += -DLMC_SDC
else
    SDCSuffix :=
endif

ifeq ($(USE_WBAR),TRUE)
    WBARSuffix := .WBAR
    DEFINES += -DUSE_WBAR
else
    WBARSuffix :=
endif

ThreadsSuffix :=

ifeq ($(PRECISION),FLOAT)
    PrecisionSuffix := .$(PRECISION)
else
    PrecisionSuffix :=
endif

ifeq ($(NEEDS_FLUSH_F),TRUE)
  fEXE_sources += bl_flush.f
endif

CPlusPlusSourceFiles =
C89SourceFiles	=
F77SourceFiles	=
F90SourceFiles	=
f77SourceFiles	=

objForLibs	=	$(CLIB_sources:%.cpp=%.o)			\
			$(FLIB_sources:%.F=%.o)				\
			$(F90LIB_sources:%.F90=%.o)			\
			$(cLIB_sources:%.c=%.o)				\
			$(fLIB_sources:%.f=%.o)				\
			$(f90LIB_sources:%.f90=%.o)			\

objStandalone	= 	$(CEXE_sources:%.cpp=%.o)			\
			$(FEXE_sources:%.F=%.o)				\
			$(cEXE_sources:%.c=%.o)				\
			$(fEXE_sources:%.f=%.o)				\
			$(f90EXE_sources:%.f90=%.o)			\
			$(F90EXE_sources:%.F90=%.o)                     \

objForExecs	= $(addprefix $(objEXETempDir)/, $(objStandalone))

INCLUDE_LOCATIONS += . $(XTRAINCLOC) $(XINCL) $(GNU_STD_INCL)
LIBRARY_LOCATIONS += . $(XTRALIBLOC) $(XLIBL)

DEFINES		+= 	-DBL_SPACEDIM=$(DIM)				\
		  	-DBL_FORT_USE_$(FORTLINK)			\
		  	-DBL_$(MACHINE)					\
		  	$(XTRADEFS)

ifeq ($(PRECISION),FLOAT)
DEFINES += -DBL_USE_FLOAT
endif

ifeq ($(DIMENSION_AGNOSTIC),TRUE)
DEFINES += -DDIMENSION_AGNOSTIC
endif

ifeq ($(DEBUG),TRUE)
  DEFINES += -DBL_USE_ASSERTION
else
ifeq ($(USE_ASSERTION),TRUE)
  DEFINES += -DBL_USE_ASSERTION
endif
endif

ifeq ($(BL_ALIGN_BYTE),64)
  DEFINES += -DBL_ALIGN_BYTE=64
else 
ifeq ($(BL_ALIGN_BYTE),32)
  DEFINES += -DBL_ALIGN_BYTE=32
else 
ifeq ($(BL_ALIGN_BYTE),16)
  DEFINES += -DBL_ALIGN_BYTE=16
else 
ifeq ($(WHICHLINUX),EDISON)
  DEFINES += -DBL_ALIGN_BYTE=32
endif
endif
endif
endif

ifeq ($(BL_SIMD_LEN),8)
  DEFINES += -DBL_SIMD_LEN=8
else 
ifeq ($(BL_SIMD_LEN),4)
  DEFINES += -DBL_SIMD_LEN=4
else 
ifeq ($(WHICHLINUX),EDISON)
  DEFINES += -DBL_SIMD_LEN=4
endif
endif
endif

includes	= $(addprefix -I, $(INCLUDE_LOCATIONS))
fincludes	= $(includes)
f_includes	= $(addprefix -I , $(INCLUDE_LOCATIONS))
fmoddir         = $(objEXETempDir)

CPPFLAGS	+= $(DEFINES) $(includes)

libraries	= $(LIBRARIES) $(BL_MPI_LIBS) $(XTRALIBS)

LDFLAGS		+= $(addprefix -L, $(LIBRARY_LOCATIONS))

machineSuffix	= $(MACHINE).$(COMP)$(FCOMPSuffix)$(LevelSetSuffix)$(PrecisionSuffix)$(DebugSuffix)$(ProfSuffix)$(MProfSuffix)$(ITACSuffix)$(BTSuffix)$(MAESTROSuffix)$(SDCSuffix)$(WBARSuffix)$(MPISuffix)$(UPCXXSuffix)$(OMPSuffix)$(ThreadsSuffix)$(IPMSuffix)$(DUMPISuffix)$(USERSuffix)

optionsSuffix	= $(DIM)d.$(machineSuffix)

optionsLib	= $(addprefix lib,					\
			$(addsuffix $(optionsSuffix).a, $(LBASE)))
 
executable	= $(addsuffix $(optionsSuffix).ex, $(EBASE))

depTempDir	= d/$(optionsSuffix)
depEXETempDir	= d/$(optionsSuffix).EXE
objTempDir	= o/$(optionsSuffix)
objEXETempDir   = o/$(optionsSuffix).EXE
f77TempDir	= f/$(optionsSuffix)

#
# For source code manipulation
#
CSRCALL		= $(CEXE_sources) $(CEXE_headers)			\
                  $(CLIB_sources) $(CLIB_headers)                       \
		  $(T_sources) $(T_headers)

FSRCALL		= $(FEXE_sources) $(FEXE_headers)                       \
                  $(FLIB_sources)$(FLIB_headers)

F90SRCALL	= $(pF90EXE_sources) $(F90EXE_headers)                   \
                  $(F90LIB_sources) $(F90LIB_headers)

cSRCALL		= $(cEXE_sources) $(cEXE_headers)                       \
                  $(cLIB_sources) $(cLIB_headers)

fSRCALL		= $(fEXE_sources) $(fEXE_headers)                       \
                  $(fLIB_sources) $(fLIB_headers)

f90SRCALL	= $(f90EXE_sources) $(f90EXE_headers)                   \
                  $(f90LIB_sources) $(f90LIB_headers)

allSources	= $(CSRCALL) $(FSRCALL) $(F90SRCALL) $(cSRCALL) $(fSRCALL) $(f90SRCALL)

ifndef CLOSELIB
    CLOSELIB   := FALSE
endif
 
ifdef WARNINGS
    CXX += $(FULLWARN)
endif

# Use Sam Williams's HPGMG code as a drop-in replacement for BoxLib's in-house
# multigrid solver. HPGMG is single-level only, so no AMR.
ifeq ($(USE_HPGMG), TRUE)
  include $(HPGMG_DIR)/source/Make.package
  DEFINES += -DUSEHPGMG=1 -DUSE_MPI=1

# use a unique MPI subcommunicator for each level of the multigrid?
  ifeq ($(HPGMG_USE_SUBCOMM), TRUE)
    DEFINES += -DUSE_SUBCOMM=1
  endif

# which bottom solver?
  ifeq ($(HPGMG_BOTTOM_SOLVER), BICGSTAB)
    DEFINES += -DUSE_BICGSTAB=1
  else ifeq ($(HPGMG_BOTTOM_SOLVER), CG)
    DEFINES += -DUSE_CG=1
  else ifeq ($(HPGMG_BOTTOM_SOLVER), CABICGSTAB)
    DEFINES += -DUSE_CABICGSTAB=1
  else
    DEFINES += -DUSE_BICGSTAB=1
  endif

# which smoothing method?
  ifeq ($(HPGMG_SMOOTHER), GSRB)
    DEFINES += -DUSE_GSRB=1
    # HPGMG has several different ways to apply the GSRB smooths
    ifeq ($(HPGMG_GSRB_TYPE), STRIDE2)
      DEFINES += -DGSRB_STRIDE2=1
    else ifeq ($(HPGMG_GSRB_TYPE), FP)
      DEFINES += -DGSRB_FP=1
    else ifeq ($(HPGMG_GSRB_TYPE), BRANCH)
      DEFINES += -DGSRB_BRANCH=1
    else
      DEFINES += -DGSRB_STRIDE2=1
    endif
    ifeq ($(HPGMG_GSRB_OOP), TRUE)
      DEFINES += -DGSRB_OOP=1
    endif
  else ifeq ($(HPGMG_SMOOTHER), CHEBY)
    DEFINES += -DUSE_CHEBY=1
  else ifeq ($(HPGMG_SMOOTHER), JACOBI)
    DEFINES += -DUSE_JACOBI=1
  else ifeq ($(HPGMG_SMOOTHER), L1JACOBI)
    DEFINES += -DUSE_L1JACOBI=1
  else
   DEFINES += -DUSE_GSRB=1
  endif

# if this is true then the first cycle we do is F
  ifeq ($(HPGMG_FCYCLES), TRUE)
    DEFINES += -DUSE_FCYCLES=1
    # do pure F-cycles until it converges
    ifeq ($(HPGMG_POST_F_CYCLE_TYPE), F)
      DEFINES += -DUNLIMIT_F_CYCLES=1
    # do exactly 1 F-cycle followed by however many V-cycles it takes to converge
    else ifeq ($(HPGMG_POST_F_CYCLE_TYPE), V)
      DEFINES += -DUNLIMIT_FMG_VCYCLES=1
    else
      DEFINES += -DUNLIMIT_FMG_VCYCLES=1
    endif
  endif

# is this a Helmholtz problem or a Poisson problem?
  ifeq ($(HPGMG_HELMHOLTZ), TRUE)
    DEFINES += -DUSE_HELMHOLTZ=1
  endif

# the constant-coefficient stencil requires significantly less data movement during the calculation
  ifeq ($(HPGMG_STENCIL_VARIABLE_COEFFICIENT), TRUE)
    DEFINES += -DSTENCIL_VARIABLE_COEFFICIENT=1
  endif

  include $(HPGMG_DIR)/source/Make.package
  include $(BOXLIB_HOME)/Src/Extern/hpgmg/Make.package
  INCLUDE_LOCATIONS += $(HPGMG_DIR)/source
  INCLUDE_LOCATIONS += $(BOXLIB_HOME)/Src/Extern/hpgmg
  VPATH_LOCATIONS   += $(HPGMG_DIR)/source
  VPATH_LOCATIONS   += $(BOXLIB_HOME)/Src/Extern/hpgmg
endif

ifeq ($(WHICHLINUX),MIRA)
  ifeq ($(COMP),IBM)
    FORTLINK = LOWERCASE
    CPPFLAGS += -DBL_FORT_USE_LOWERCASE
  endif
endif
